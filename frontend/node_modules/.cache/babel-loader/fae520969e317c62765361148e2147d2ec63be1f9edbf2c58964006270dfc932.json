{"ast":null,"code":"import axios from 'axios';\nexport default {\n  name: 'VerifyEmail',\n  data() {\n    return {\n      parametrs: this.$route.param\n    };\n  },\n  computed: {\n    uid() {\n      return this.$route.params.uid;\n    },\n    token() {\n      return this.$route.params.token;\n    }\n  }\n  // methods: {\n  //   async verifyEmailAccount() {\n  //     try {\n  //       const response = await axios.get('https://jsonplaceholder.typicode.com/posts?_limit=10');\n  //       /users/reg/success/MzE/bgdyz6-0114dca11d4c65491571828623859a3b/\n  //       this.posts = response.data;\n  //     } catch (e) {\n  //       alert('Ошибка')\n  //     }\n  //   },\n\n  //   async verifyEmailAccount() {\n  //     this.errors = []\n  //     if (this.password1 === '') {\n  //       this.errors.push('The password is too short')\n  //     }\n  //     if (this.email === '') {\n  //       this.errors.push('The email is missing')\n  //     }\n  //     if (this.email.length > 254) {\n  //       this.errors.push('Почта может не содержать более 254 символов')\n  //     }\n  //     if (this.first_name.length > 150) {\n  //       this.errors.push('Имя может не содержать более 150 символов')\n  //     }\n  //     if (this.middle_name.length > 100) {\n  //       this.errors.push('Отчество может не содержать более 100 символов')\n  //     }\n  //     if (this.student_group.length > 30) {\n  //       this.errors.push('Группа может не содержать более 30 символов')\n  //     }\n  //     if (/^\\d\\d\\d-\\d\\d\\d$/.test(this.student_group) === false) {\n  //       this.errors.push('Группа должна быть в формате 111-111, пример 191-363')\n  //     }\n  //     if (this.password1 === '') {\n  //       this.errors.push('The password is too short')\n  //     }\n  //     if (this.password1 !== this.password2) {\n  //       this.errors.push('The password are not matching')\n  //     }\n  //     if (!this.errors.length) {\n  //       this.$store.commit('setIsLoading', true)\n  //       const formData = {\n  //         first_name: this.first_name,\n  //         last_name: this.last_name,\n  //         middle_name: this.middle_name,\n  //         student_group: this.student_group,\n  //         email: this.email,\n  //         password: this.password1,\n  //         groups: this.selectedGroup['name']\n  //       }\n  //       await axios\n  //         .post('/users/reg/', formData)\n  //         .then(response => {\n  //           toast({\n  //             message: 'Аккаунт был создан, проверьте свою почту',\n  //             type: 'is-success',\n  //             dismissible: true,\n  //             pauseOnHover: true,\n  //             duration: 2000,\n  //             position: 'bottom-right',\n  //           })\n  //           this.$router.push('/login')\n  //         })\n  //         .catch(error => {\n  //           // if (error.response) {\n\n  //           //     for (const property in error.response.data) {\n  //           //         this.errors.push(`${property}: ${error.response.data[property]}`)\n  //           //     }\n  //           // } else if (error.message) {\n  //           //     this.errors.push('Something went wrong. Please try again!')\n  //           // }\n  //           if (error.message) {\n  //             this.errors.push(error)\n  //             this.errors.push('Что-то пошло не так. Попробуйте еще раз!')\n  //           }\n  //         })\n\n  //       this.$store.commit('setIsLoading', false)\n  //     }\n  //   }\n  // },\n  // mounted() {\n  //   this.verifyEmailAccount\n  // }\n};","map":{"version":3,"mappings":"AASA,OAAOA,KAAI,MAAO,OAAM;AACxB,eAAe;EACbC,IAAI,EAAE,aAAa;EACnBC,IAAI,GAAG;IACL,OAAM;MACJC,SAAS,EAAE,IAAI,CAACC,MAAM,CAACC;IACzB;EACF,CAAC;EACDC,QAAQ,EAAE;IACRC,GAAG,GAAG;MACJ,OAAO,IAAI,CAACH,MAAM,CAACI,MAAM,CAACD,GAAG;IAC/B,CAAC;IACDE,KAAK,GAAG;MACN,OAAO,IAAI,CAACL,MAAM,CAACI,MAAM,CAACC,KAAK;IACjC;EACF;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;AACF,CAAC","names":["axios","name","data","parametrs","$route","param","computed","uid","params","token"],"sourceRoot":"","sources":["C:\\Users\\NOVAC\\Desktop\\GitHub Rep\\PD_project\\frontend\\src\\views\\VerifyEmail.vue"],"sourcesContent":["<template>\r\n  <h1 class=\"title mb-3\">Спасибо! Email успешно подтвержден</h1>\r\n  <div>haha</div>\r\n  <div v-if=\"uid\">Board with prop id: {{ uid }}</div>\r\n  <div v-if=\"token\">Board with prop id: {{ token }}</div>\r\n  <div> params {{ parametrs }}</div>\r\n</template>\r\n  \r\n<script>\r\nimport axios from 'axios'\r\nexport default {\r\n  name: 'VerifyEmail',\r\n  data() {\r\n    return{\r\n      parametrs: this.$route.param\r\n    }\r\n  },\r\n  computed: {\r\n    uid() {\r\n      return this.$route.params.uid;\r\n    },\r\n    token() {\r\n      return this.$route.params.token;\r\n    }\r\n  },\r\n  // methods: {\r\n  //   async verifyEmailAccount() {\r\n  //     try {\r\n  //       const response = await axios.get('https://jsonplaceholder.typicode.com/posts?_limit=10');\r\n  //       /users/reg/success/MzE/bgdyz6-0114dca11d4c65491571828623859a3b/\r\n  //       this.posts = response.data;\r\n  //     } catch (e) {\r\n  //       alert('Ошибка')\r\n  //     }\r\n  //   },\r\n\r\n  //   async verifyEmailAccount() {\r\n  //     this.errors = []\r\n  //     if (this.password1 === '') {\r\n  //       this.errors.push('The password is too short')\r\n  //     }\r\n  //     if (this.email === '') {\r\n  //       this.errors.push('The email is missing')\r\n  //     }\r\n  //     if (this.email.length > 254) {\r\n  //       this.errors.push('Почта может не содержать более 254 символов')\r\n  //     }\r\n  //     if (this.first_name.length > 150) {\r\n  //       this.errors.push('Имя может не содержать более 150 символов')\r\n  //     }\r\n  //     if (this.middle_name.length > 100) {\r\n  //       this.errors.push('Отчество может не содержать более 100 символов')\r\n  //     }\r\n  //     if (this.student_group.length > 30) {\r\n  //       this.errors.push('Группа может не содержать более 30 символов')\r\n  //     }\r\n  //     if (/^\\d\\d\\d-\\d\\d\\d$/.test(this.student_group) === false) {\r\n  //       this.errors.push('Группа должна быть в формате 111-111, пример 191-363')\r\n  //     }\r\n  //     if (this.password1 === '') {\r\n  //       this.errors.push('The password is too short')\r\n  //     }\r\n  //     if (this.password1 !== this.password2) {\r\n  //       this.errors.push('The password are not matching')\r\n  //     }\r\n  //     if (!this.errors.length) {\r\n  //       this.$store.commit('setIsLoading', true)\r\n  //       const formData = {\r\n  //         first_name: this.first_name,\r\n  //         last_name: this.last_name,\r\n  //         middle_name: this.middle_name,\r\n  //         student_group: this.student_group,\r\n  //         email: this.email,\r\n  //         password: this.password1,\r\n  //         groups: this.selectedGroup['name']\r\n  //       }\r\n  //       await axios\r\n  //         .post('/users/reg/', formData)\r\n  //         .then(response => {\r\n  //           toast({\r\n  //             message: 'Аккаунт был создан, проверьте свою почту',\r\n  //             type: 'is-success',\r\n  //             dismissible: true,\r\n  //             pauseOnHover: true,\r\n  //             duration: 2000,\r\n  //             position: 'bottom-right',\r\n  //           })\r\n  //           this.$router.push('/login')\r\n  //         })\r\n  //         .catch(error => {\r\n  //           // if (error.response) {\r\n\r\n  //           //     for (const property in error.response.data) {\r\n  //           //         this.errors.push(`${property}: ${error.response.data[property]}`)\r\n  //           //     }\r\n  //           // } else if (error.message) {\r\n  //           //     this.errors.push('Something went wrong. Please try again!')\r\n  //           // }\r\n  //           if (error.message) {\r\n  //             this.errors.push(error)\r\n  //             this.errors.push('Что-то пошло не так. Попробуйте еще раз!')\r\n  //           }\r\n  //         })\r\n\r\n  //       this.$store.commit('setIsLoading', false)\r\n  //     }\r\n  //   }\r\n  // },\r\n  // mounted() {\r\n  //   this.verifyEmailAccount\r\n  // }\r\n};\r\n</script>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}