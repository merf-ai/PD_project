{"ast":null,"code":"import { createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"h1\", {\n  class: \"title mb-3\"\n}, \"Спасибо! Email успешно подтвержден\", -1 /* HOISTED */);\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"div\", null, \"haha\", -1 /* HOISTED */);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_hoisted_1, _hoisted_2, _createCommentVNode(\" <div>Board with prop id: {{ uid }}</div>\\r\\n  <div>Board with prop id: {{ token }}</div> \"), _createElementVNode(\"div\", null, \" params \" + _toDisplayString($data.parametrs), 1 /* TEXT */)], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"mappings":";gCACEA,oBAA8D;EAA1DC,KAAK,EAAC;AAAY,GAAC,oCAAkC;gCACzDD,oBAAe,aAAV,MAAI;;;6DADTE,UAA8D,EAC9DC,UAAe,EACfC,iHAC8C,EAC9CJ,oBAAkC,aAA7B,UAAQ,oBAAGK,eAAS","names":["_createElementVNode","class","_hoisted_1","_hoisted_2","_createCommentVNode","$data"],"sourceRoot":"","sources":["C:\\Users\\NOVAC\\Desktop\\GitHub Rep\\PD_project\\frontend\\src\\views\\VerifyEmail.vue"],"sourcesContent":["<template>\r\n  <h1 class=\"title mb-3\">Спасибо! Email успешно подтвержден</h1>\r\n  <div>haha</div>\r\n  <!-- <div>Board with prop id: {{ uid }}</div>\r\n  <div>Board with prop id: {{ token }}</div> -->\r\n  <div> params {{ parametrs }}</div>\r\n</template>\r\n  \r\n<script>\r\nimport axios from 'axios'\r\nexport default {\r\n  name: 'VerifyEmail',\r\n  data() {\r\n    return{\r\n      parametrs: this.$route.params\r\n    }\r\n  },\r\n  // methods: {\r\n  //   async verifyEmailAccount() {\r\n  //     try {\r\n  //       const response = await axios.get('https://jsonplaceholder.typicode.com/posts?_limit=10');\r\n  //       /users/reg/success/MzE/bgdyz6-0114dca11d4c65491571828623859a3b/\r\n  //       this.posts = response.data;\r\n  //     } catch (e) {\r\n  //       alert('Ошибка')\r\n  //     }\r\n  //   },\r\n\r\n  //   async verifyEmailAccount() {\r\n  //     this.errors = []\r\n  //     if (this.password1 === '') {\r\n  //       this.errors.push('The password is too short')\r\n  //     }\r\n  //     if (this.email === '') {\r\n  //       this.errors.push('The email is missing')\r\n  //     }\r\n  //     if (this.email.length > 254) {\r\n  //       this.errors.push('Почта может не содержать более 254 символов')\r\n  //     }\r\n  //     if (this.first_name.length > 150) {\r\n  //       this.errors.push('Имя может не содержать более 150 символов')\r\n  //     }\r\n  //     if (this.middle_name.length > 100) {\r\n  //       this.errors.push('Отчество может не содержать более 100 символов')\r\n  //     }\r\n  //     if (this.student_group.length > 30) {\r\n  //       this.errors.push('Группа может не содержать более 30 символов')\r\n  //     }\r\n  //     if (/^\\d\\d\\d-\\d\\d\\d$/.test(this.student_group) === false) {\r\n  //       this.errors.push('Группа должна быть в формате 111-111, пример 191-363')\r\n  //     }\r\n  //     if (this.password1 === '') {\r\n  //       this.errors.push('The password is too short')\r\n  //     }\r\n  //     if (this.password1 !== this.password2) {\r\n  //       this.errors.push('The password are not matching')\r\n  //     }\r\n  //     if (!this.errors.length) {\r\n  //       this.$store.commit('setIsLoading', true)\r\n  //       const formData = {\r\n  //         first_name: this.first_name,\r\n  //         last_name: this.last_name,\r\n  //         middle_name: this.middle_name,\r\n  //         student_group: this.student_group,\r\n  //         email: this.email,\r\n  //         password: this.password1,\r\n  //         groups: this.selectedGroup['name']\r\n  //       }\r\n  //       await axios\r\n  //         .post('/users/reg/', formData)\r\n  //         .then(response => {\r\n  //           toast({\r\n  //             message: 'Аккаунт был создан, проверьте свою почту',\r\n  //             type: 'is-success',\r\n  //             dismissible: true,\r\n  //             pauseOnHover: true,\r\n  //             duration: 2000,\r\n  //             position: 'bottom-right',\r\n  //           })\r\n  //           this.$router.push('/login')\r\n  //         })\r\n  //         .catch(error => {\r\n  //           // if (error.response) {\r\n\r\n  //           //     for (const property in error.response.data) {\r\n  //           //         this.errors.push(`${property}: ${error.response.data[property]}`)\r\n  //           //     }\r\n  //           // } else if (error.message) {\r\n  //           //     this.errors.push('Something went wrong. Please try again!')\r\n  //           // }\r\n  //           if (error.message) {\r\n  //             this.errors.push(error)\r\n  //             this.errors.push('Что-то пошло не так. Попробуйте еще раз!')\r\n  //           }\r\n  //         })\r\n\r\n  //       this.$store.commit('setIsLoading', false)\r\n  //     }\r\n  //   }\r\n  // },\r\n  // mounted() {\r\n  //   this.verifyEmailAccount\r\n  // }\r\n};\r\n</script>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}