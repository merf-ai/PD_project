{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nexport default {\n  name: 'Main',\n  data() {\n    return {\n      profile: [],\n      tasks: [],\n      tokeno: '',\n      isGeneratedTasks: false,\n      processGenerate: '',\n      isEmail: '',\n      file: ''\n    };\n  },\n  mounted() {\n    this.getTask();\n  },\n  methods: {\n    submitFile() {\n      let formData = new FormData();\n      formData.append('decision', this.file);\n      axios.post('//test_generator/upload_decision/', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      }).then(function () {\n        console.log('SUCCESS!!');\n      }).catch(function () {\n        console.log('FAILURE!!');\n      });\n    },\n    handleFileUpload() {\n      this.file = this.$refs.file.files[0];\n    },\n    async getTask() {\n      this.$store.commit('setIsLoading', true);\n      await axios.post('/test_generator/show_test/', {\n        headers: {\n          'Authorization': 'Token ' + this.$store.state.token\n        }\n      }).then(response => {\n        this.tasks = response.data;\n        this.isGeneratedTasks = true;\n      }).catch(error => {\n        if (error.response) {\n          this.isEmail = error.response.data.detail;\n        }\n        console.log(error);\n        this.isGeneratedTasks = false;\n      });\n      this.$store.commit('setIsLoading', false);\n    },\n    async generateTask() {\n      this.$store.commit('setIsLoading', true);\n      this.processGenerate = 'Генерируется вариант';\n      await axios.post('/test_generator/generate/', {\n        headers: {\n          'Authorization': 'Token ' + this.$store.state.token\n        }\n      }).then(response => {\n        this.profile = response.data;\n        this.processGenerate = 'Вариант сгенерирован';\n        this.$router.push('/account');\n      }).catch(error => {\n        console.log(error);\n        this.processGenerate = 'Ошибка';\n      });\n      this.$store.commit('setIsLoading', false);\n    }\n  }\n};","map":{"version":3,"mappings":";AAiEA,OAAOA,KAAI,MAAO,OAAM;AACxB,eAAe;EACXC,IAAI,EAAE,MAAM;EACZC,IAAI,GAAG;IACH,OAAO;MACHC,OAAO,EAAE,EAAE;MACXC,KAAK,EAAE,EAAE;MACTC,MAAM,EAAE,EAAE;MACVC,gBAAgB,EAAE,KAAK;MACvBC,eAAe,EAAE,EAAE;MACnBC,OAAO,EAAE,EAAE;MACXC,IAAI,EAAE;IACV;EACJ,CAAC;EACDC,OAAO,GAAG;IACN,IAAI,CAACC,OAAO,EAAC;EACjB,CAAC;EACDC,OAAO,EAAE;IACLC,UAAU,GAAG;MACT,IAAIC,QAAO,GAAI,IAAIC,QAAQ,EAAE;MAC7BD,QAAQ,CAACE,MAAM,CAAC,UAAU,EAAE,IAAI,CAACP,IAAI,CAAC;MACtCT,KAAK,CAACiB,IAAI,CAAC,mCAAmC,EAC1CH,QAAQ,EACR;QACII,OAAO,EAAE;UACL,cAAc,EAAE;QACpB;MACJ,EACH,CAACC,IAAI,CAAC,YAAY;QACfC,OAAO,CAACC,GAAG,CAAC,WAAW,CAAC;MAC5B,CAAC,EACIC,KAAK,CAAC,YAAY;QACfF,OAAO,CAACC,GAAG,CAAC,WAAW,CAAC;MAC5B,CAAC,CAAC;IACV,CAAC;IACDE,gBAAgB,GAAG;MACf,IAAI,CAACd,IAAG,GAAI,IAAI,CAACe,KAAK,CAACf,IAAI,CAACgB,KAAK,CAAC,CAAC,CAAC;IACxC,CAAC;IACD,MAAMd,OAAO,GAAG;MACZ,IAAI,CAACe,MAAM,CAACC,MAAM,CAAC,cAAc,EAAE,IAAI;MACvC,MAAM3B,KAAI,CACLiB,IAAI,CAAC,4BAA4B,EAAE;QAChCC,OAAO,EAAE;UAAE,eAAe,EAAE,QAAO,GAAI,IAAI,CAACQ,MAAM,CAACE,KAAK,CAACC;QAAM;MACnE,CAAC,EACAV,IAAI,CAACW,QAAO,IAAK;QACd,IAAI,CAAC1B,KAAI,GAAI0B,QAAQ,CAAC5B,IAAG;QACzB,IAAI,CAACI,gBAAe,GAAI,IAAG;MAC/B,CAAC,EACAgB,KAAK,CAACS,KAAI,IAAK;QACZ,IAAIA,KAAK,CAACD,QAAQ,EAAE;UAChB,IAAI,CAACtB,OAAM,GAAIuB,KAAK,CAACD,QAAQ,CAAC5B,IAAI,CAAC8B,MAAK;QAC5C;QACAZ,OAAO,CAACC,GAAG,CAACU,KAAK;QACjB,IAAI,CAACzB,gBAAe,GAAI,KAAI;MAChC,CAAC;MACL,IAAI,CAACoB,MAAM,CAACC,MAAM,CAAC,cAAc,EAAE,KAAK;IAC5C,CAAC;IACD,MAAMM,YAAY,GAAG;MACjB,IAAI,CAACP,MAAM,CAACC,MAAM,CAAC,cAAc,EAAE,IAAI;MACvC,IAAI,CAACpB,eAAc,GAAI,sBAAqB;MAE5C,MAAMP,KAAI,CACLiB,IAAI,CAAC,2BAA2B,EAAE;QAC/BC,OAAO,EAAE;UAAE,eAAe,EAAE,QAAO,GAAI,IAAI,CAACQ,MAAM,CAACE,KAAK,CAACC;QAAM;MACnE,CAAC,EACAV,IAAI,CAACW,QAAO,IAAK;QACd,IAAI,CAAC3B,OAAM,GAAI2B,QAAQ,CAAC5B,IAAG;QAC3B,IAAI,CAACK,eAAc,GAAI,sBAAqB;QAC5C,IAAI,CAAC2B,OAAO,CAACC,IAAI,CAAC,UAAU;MAChC,CAAC,EACAb,KAAK,CAACS,KAAI,IAAK;QACZX,OAAO,CAACC,GAAG,CAACU,KAAK;QACjB,IAAI,CAACxB,eAAc,GAAI,QAAO;MAClC,CAAC;MAEL,IAAI,CAACmB,MAAM,CAACC,MAAM,CAAC,cAAc,EAAE,KAAK;IAC5C;EACJ;AACJ","names":["axios","name","data","profile","tasks","tokeno","isGeneratedTasks","processGenerate","isEmail","file","mounted","getTask","methods","submitFile","formData","FormData","append","post","headers","then","console","log","catch","handleFileUpload","$refs","files","$store","commit","state","token","response","error","detail","generateTask","$router","push"],"sourceRoot":"","sources":["C:\\Users\\NOVAC\\Desktop\\GitHub Rep\\PD_project\\frontend\\src\\views\\Generate.vue"],"sourcesContent":["<template>\r\n    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap-avatar@latest/dist/avatar.min.css\" rel=\"stylesheet\">\r\n    <div class=\"Generate\">\r\n        <h1 class=\"title mb-3\">Генератор заданий</h1>\r\n\r\n        <div v-if=\"isEmail\">\r\n            {{ isEmail }}\r\n        </div>\r\n\r\n        <div v-if=\"tasks.message === 'Извините для вас тест не сгенерирован!'\">\r\n            <p>На этой странице вы можете сгенерировать вариант</p>\r\n            <div class=\"btn-group mb-3\" role=\"group\" aria-label=\"Basic example\">\r\n                <button type=\"button\" @click=\"generateTask()\" class=\"btn btn-primary\">Сгенерировать вариант</button>\r\n            </div>\r\n        </div>\r\n\r\n        <div v-if=\"tasks.message !== 'Извините для вас тест не сгенерирован!' && isEmail === ''\">\r\n            <p>Для вас уже доступен сгенерированный вариант</p>\r\n        </div>\r\n\r\n        <div v-if=\"tasks.message !== 'Извините для вас тест не сгенерирован!' && isEmail === ''\">\r\n            <div class=\"card mt-4\">\r\n                <div class=\"card-body\">\r\n                    <h3 class=\"card-title mb-3\">Отправка ответа</h3>\r\n                    <div class=\"input-group\">\r\n                        <input type=\"file\" class=\"form-control\" id=\"file\" ref=\"file\" v-on:change=\"handleFileUpload()\">\r\n                        <button class=\"btn btn-outline-secondary\" type=\"button\" @click=\"submitFile()\">\r\n                            Отправить ответ\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class=\"card mt-4\">\r\n                <div class=\"card-body\">\r\n                    <h3 class=\"card-title\">Сгенерированный вариант</h3>\r\n                    <div v-for=\"task in tasks.data\">\r\n                        <div class=\"card mt-4\">\r\n                            <div class=\"card-body\">\r\n                                <h5 class=\"card-subtitle mb-2 text-muted\">Задание {{ task.task_number }}</h5>\r\n                                <ul class=\"list-group list-group-flush\">\r\n\r\n                                    <li class=\"list-group-item\">\r\n                                        <h5 class=\"card-title\">Необходимо вычислить</h5>\r\n                                        <div class=\"d-flex justify-content-center mt-5\">\r\n                                            <vue-mathjax :formula=\"'$$' + task.example + '$$'\"></vue-mathjax>\r\n                                        </div>\r\n                                    </li>\r\n                                    <!-- <li class=\"list-group-item\">\r\n                                    <h5 class=\"card-title\">Ответ</h5>\r\n                                    <div class=\"d-flex justify-content-center mt-5\">\r\n                                        <vue-mathjax :formula=\"'$$' + task.answer + '$$'\"></vue-mathjax>\r\n                                    </div>\r\n                                </li> -->\r\n                                </ul>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios'\r\nexport default {\r\n    name: 'Main',\r\n    data() {\r\n        return {\r\n            profile: [],\r\n            tasks: [],\r\n            tokeno: '',\r\n            isGeneratedTasks: false,\r\n            processGenerate: '',\r\n            isEmail: '',\r\n            file: ''\r\n        }\r\n    },\r\n    mounted() {\r\n        this.getTask()\r\n    },\r\n    methods: {\r\n        submitFile() {\r\n            let formData = new FormData();\r\n            formData.append('decision', this.file);\r\n            axios.post('//test_generator/upload_decision/',\r\n                formData,\r\n                {\r\n                    headers: {\r\n                        'Content-Type': 'multipart/form-data'\r\n                    }\r\n                }\r\n            ).then(function () {\r\n                console.log('SUCCESS!!');\r\n            })\r\n                .catch(function () {\r\n                    console.log('FAILURE!!');\r\n                });\r\n        },\r\n        handleFileUpload() {\r\n            this.file = this.$refs.file.files[0];\r\n        },\r\n        async getTask() {\r\n            this.$store.commit('setIsLoading', true)\r\n            await axios\r\n                .post('/test_generator/show_test/', {\r\n                    headers: { 'Authorization': 'Token ' + this.$store.state.token }\r\n                })\r\n                .then(response => {\r\n                    this.tasks = response.data\r\n                    this.isGeneratedTasks = true\r\n                })\r\n                .catch(error => {\r\n                    if (error.response) {\r\n                        this.isEmail = error.response.data.detail\r\n                    }\r\n                    console.log(error)\r\n                    this.isGeneratedTasks = false\r\n                })\r\n            this.$store.commit('setIsLoading', false)\r\n        },\r\n        async generateTask() {\r\n            this.$store.commit('setIsLoading', true)\r\n            this.processGenerate = 'Генерируется вариант'\r\n\r\n            await axios\r\n                .post('/test_generator/generate/', {\r\n                    headers: { 'Authorization': 'Token ' + this.$store.state.token }\r\n                })\r\n                .then(response => {\r\n                    this.profile = response.data\r\n                    this.processGenerate = 'Вариант сгенерирован'\r\n                    this.$router.push('/account')\r\n                })\r\n                .catch(error => {\r\n                    console.log(error)\r\n                    this.processGenerate = 'Ошибка'\r\n                })\r\n\r\n            this.$store.commit('setIsLoading', false)\r\n        }\r\n    }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}